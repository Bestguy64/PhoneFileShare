name: Android CI Build â€” stable SDK installer and build

on:
  push:
    branches: [ main ]
  workflow_dispatch:
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Prepare ANDROID_SDK_ROOT (use runner temp)
        run: |
          echo "ANDROID_SDK_ROOT=$RUNNER_TEMP/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=$RUNNER_TEMP/android-sdk" >> $GITHUB_ENV
          mkdir -p "$RUNNER_TEMP/android-sdk"
        shell: bash

      - name: Install unzip and curl
        run: |
          sudo apt-get update -y
          sudo apt-get install -y unzip curl
        shell: bash

      - name: Download and extract Android command-line tools
        run: |
          SDK_ROOT="$ANDROID_SDK_ROOT"
          mkdir -p "$SDK_ROOT/cmdline-tools"
          cd "$SDK_ROOT/cmdline-tools"
          curl -fsSL -o commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip
          unzip -q commandlinetools.zip
          # normalize to 'latest'
          if [ -d "$SDK_ROOT/cmdline-tools/cmdline-tools" ]; then
            mv "$SDK_ROOT/cmdline-tools/cmdline-tools" "$SDK_ROOT/cmdline-tools/latest"
          elif [ -d "$SDK_ROOT/cmdline-tools/tools" ]; then
            mv "$SDK_ROOT/cmdline-tools/tools" "$SDK_ROOT/cmdline-tools/latest"
          else
            mkdir -p "$SDK_ROOT/cmdline-tools/latest"
            mv "$SDK_ROOT/cmdline-tools"/* "$SDK_ROOT/cmdline-tools/latest" || true
          fi
        shell: bash

      - name: Install Android SDK packages
        run: |
          yes | $ANDROID_SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --sdk_root=$ANDROID_SDK_ROOT "platform-tools" "platforms;android-33" "build-tools;33.0.2" || true
        shell: bash

      - name: Create comprehensive Android SDK license files
        run: |
          mkdir -p $ANDROID_SDK_ROOT/licenses
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> $ANDROID_SDK_ROOT/licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
          echo "d975f751698a77b662f1254ddbeed3901e976f5a" > $ANDROID_SDK_ROOT/licenses/intel-android-extra-license
          echo "79120722343a6f314e0717f187c4267d52f43370" > $ANDROID_SDK_ROOT/licenses/mips-android-sysimage-license
          echo "601085b94cd77f0b54ff86406957099ebe79c4d6" > $ANDROID_SDK_ROOT/licenses/android-googletv-license
          echo "33b6a2b6460d5cd946777579f9bad6d34c10776f" > $ANDROID_SDK_ROOT/licenses/google-gdk-license
        shell: bash

      - name: Add platform-tools and sdk tools to PATH and verify adb
        run: |
          echo "PATH=$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH" >> $GITHUB_ENV
          export PATH="$ANDROID_SDK_ROOT/platform-tools:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$PATH"
          adb version || (echo "adb not found" && exit 1)
          sdkmanager --version || (echo "sdkmanager not found" && exit 1)
        shell: bash

      - name: Build debug APK
        run: |
          chmod +x ./gradlew
          ./gradlew assembleDebug --no-daemon --stacktrace
        shell: bash

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug-apk
          path: app/build/outputs/apk/debug/*.apk
